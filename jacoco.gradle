apply plugin: 'jacoco'
/**
 * The correct path of the report is $rootProjectDir/app/build/reports/jacoco/index.html
 * to run this task use: ./gradlew clean jacocoTestReport
 */

// Refer from https://youtrack.jetbrains.com/issue/KT-44757#focus=Comments-27-5247441.0-0
// The issue Gradle version: 7.0.2, Kotlin: 1.5.30. Jacoco: 0.8.7 Just applying the jacoco version might not always work.
jacoco {
    toolVersion = rootProject.jacocoVersion
}

// Use the resolution strategy along with the version in the app.gradle. It will fix the issue.
configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion rootProject.jacocoVersion
            }
        }
    }
}

def fileFilter = [
        //Classes I intentionally don't want to test
        '**/*Application.*',
        '**/*Activity**',
        '**/BuildConfig.*',
        '**/*Fragment**',
        '**/*View.*',
        '**/*Adapter**',
        '**/*ViewHolder**',
        '**/extension/**',
        '**/factory/*.*',
        '**/utils/*.*',
        '**/di/**',
        '**/*Dagger**',
        '**/*_MembersInjector.class',//Dagger2 generated code
        '**/*_MembersInjector*.*',
        '**/*_*Factory*.*',
        '**/*Component*.*',
        '**/*Module*.*',
        '**/databinding/**',
        '**/model/**'
]

def mainSrc = "${project.projectDir}/src/main/java"
def debugSrc = "${project.projectDir}/src/debug/java"

def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest"]) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.from = files([mainSrc,debugSrc])
    classDirectories.from = files([javaDebugTree, kotlinDebugTree])

    executionData.from = fileTree(dir: "$buildDir", includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
    ])

    doLast {
        println "Wrote HTML coverage report to ${reports.html.destination}/index.html"
        println "Wrote XML coverage report to ${reports.html.destination}"
    }
}

task openJacocoTestReport {
    group = "Reporting"

    dependsOn 'jacocoTestReport'
    doLast {
        def path = project.file("build/reports/jacoco/jacocoTestReport/html/index.html")
        exec { commandLine 'open', "$path" }
    }
}
